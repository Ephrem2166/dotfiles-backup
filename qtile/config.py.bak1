#########################################
########## Importing Libreries ##########
#########################################

from libqtile import bar, layout, qtile, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import os
import os.path
import subprocess
import colors
from pathlib import Path


from qtile_extras import widget
from qtile_extras.widget.decorations import RectDecoration
from qtile_extras.widget.decorations import PowerLineDecoration
from qtile_extras.widget.decorations import BorderDecoration

# Home path
home = str(Path.home())

################################
######### Keybindings ##########
################################

### DEFAULT APPLICATIONS ###
mod = "mod4"
myterm = "alacritty"
defaultApps = {
        "terminal" : "alacritty",
        "browser" : "firefox",
        "network" : "plasma6-nm",
        "physlock" : "physlock",
        "bluetooth" : "blueman-manager",
        }

# terminal = guess_terminal()

### KEY BINDINGS ###
keys = [
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    
    Key(
        [mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"
    ),
    Key(
        [mod, "shift"],
        "l",
        lazy.layout.shuffle_right(),
        desc="Move window to the right",
    ),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key(
        [mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"
    ),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(defaultApps["terminal"]), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window",
    ),
    Key(
        [mod],
        "t",
        lazy.window.toggle_floating(),
        desc="Toggle floating on the focused window",
    ),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload Config"),
    Key([mod, "control"], "x", lazy.shutdown(), desc="Shutdown Qtile"),
    #Key([[mod], "control"], "q", lazy.function(home + "/.config/qtile/scripts/powermenu.sh"), desc="Show Power Menu"),
    Key(
        [mod],
        "d",
        lazy.spawn("rofi -show drun -show-icons"),
        desc="Run Launcher",
    ),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    # Brightness
    Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl -q s +5%")),
    Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl -q s 5%-"))
]

# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )


groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod + group number = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod + shift + group number = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod + shift + group number = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

#### COLORS ####
colors = [["#141b1f", "#141b1f"], # 0
          ["#2D363B", "#2D363B"], # 1
          ["#D3C6AA", "#D3C6AA"], # 2
          ["#E67E80", "#E67E80"], # 3
          ["#E69875", "#E69875"], # 4
          ["#DBBC7F", "#DBBC7F"], # 5
          ["#B2C98F", "#B2C98F"], # 6
          ["#88C096", "#88C096"], # 7
          ["#A2C8C3", "#A2C8C3"], # 8
          ["#D699B6", "#D699B6"], # 9
          ["#7A8478", "#7A8478"], # 10
          ["#272E32", "#272E32"], # 11
          ["#343E44", "#343E44"], # 12
          ["#859289", "#859289"]] # 13

layout_theme = {
        "margin": 0,
        "border-width": 5,
        "border-focus": colors[7],
        "border-normal": colors[2]
        }

layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=0),
    layout.Max(),
    layout.MonadTall(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.MonadThreeCol(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.Floating(**layout_theme),
    layout.Spiral(**layout_theme),
    layout.RatioTile(**layout_theme),
    layout.Max(**layout_theme)
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

# Import color palettes from color.py
# colors = colors.DoomOne

window_name = widget.WindowName()

sep = widget.Sep(linewidth = 1, paddog = 3, foreground = colors[0], background = colors[0])

groupbox = widget.GroupBox (
        font = "UbuntuMono Nerd Font",
        fontsize = 10,
        margin_y = 4,
        margin_x = 4,
        padding_y = 6,
        padding_x = 6,
        borderwidth = 1,
        disable_drag = True,
        active = colors[2],
        inactive = colors[10],
        hide_unused = True,
        rounded = True,
        highlight_method = "block",
        highlight_color = colors[13],
        this_current_screen_border = colors[0],
        this_screen_border = colors[0],
        other_current_screen_border = colors[13],
        other_screen_border = colors[13],
        urgent_alert_method = "line",
        urgent_border = colors[6],
        urgent_text = colors[1],
        foreground = colors[0],
        background = colors[0],
        use_mouse_wheel = False
        )
prompt = widget.Prompt(
        font = "UbuntuMono Nerd Font",
        fontsize = 10,
        foreground = colors[2],
        )
tasks = widget.TaskList(
        icon_size = 10,
        font = "UbuntuMono Nerd Font",
        fontsize= 10,
        foreground = colors[2],
        background = colors[0],
        borderwidth = 0,
        border = colors[0],
        margin_y = -3,
        margin = 0,
        padding = 8,
        highlight_method = "block",
        title_width_method = "uniform",
        urgent_alert_method = "border",
        urgent_border = colors[0],
        rounded = False,
        txt_floating = "🗗 ",
        txt_maximized = "🗖 ",
        txt_minimized = "🗕 ",
            )

volicon = widget.TextBox(text = "󰕾", fontsize = 10, font = "UbuntuMono Nerd Font", foreground = colors[6], background = colors[0])
volume = widget.Volume(foreground=colors[8], padding=10, background = colors[0])
cpuicon = widget.TextBox(text = " ", fontsize = 10, font = "UbuntuMono Nerd Font",  background = colors[0], foreground = colors[5])
cpu = widget.CPU(font = "UbuntuMono Nerd Font", update_interval = 1.0, format = '{load_percent:.0f}%', foreground = colors[8], background = colors[0], padding = 5)
memicon = widget.TextBox(text = " ", fontsize = 10, font = "UbuntuMono Nerd Font", background = colors[0], foreground = colors[7])
mem = widget.Memory(font = "UbuntuMono Nerd Font", foreground = colors[8], background = colors[0], format = '{MemUsed: .0f}{mm} /{MemTotal: .0f}{mm}', measure_mem='G', padding = 5,)
clockicon = widget.TextBox(text = " ", fontsize = 10, font = "UbuntuMono Nerd Font", background = colors[0], foreground = colors[6])
clock = widget.Clock(format='%I:%M %p', font = "UbuntuMono Nerd Font", padding = 5, background = colors[0], foreground = colors[8])
curlayout = widget.CurrentLayoutIcon(scale = 0.2, foreground = colors[0], background = colors[0], padding = 10)
wifiicon = widget.TextBox(
        text = " ", 
        fontsize = 10, 
        font = "UbuntuMono Nerd Font", 
        foreground = colors[7], 
        background = colors[0],
        )

wifi = widget.Wlan(
        interface= 'wlp7s0',
        format="{essid} {percent:2.0%}",
        font = "UbuntuMono Nerd Font", 
        background = colors[0], 
        foreground = colors[5], 
        ethernet_message = "Wired",
        use_ethernet = True,
        disconnected_message = 'Disconnected', 
        update_interval = 1,
        #width=54, 
        mouse_callbacks={'Button3': lazy.spawn(defaultApps["network"])},
        )
image = widget.Image(
        filename = "~/.config/qtile/qtile.png", scale = "False",
        background = colors[0],
        )
battery = widget.Battery(
        foreground = colors[5],
        fontsize = 10,
        charge_char="󰂉 ",
        discharge_char="󰁾 ",
        empty_char="󰁺 ",
        full_char="󰁹 ",
        format = '{char} {percent:2.0%}',
        show_short_text=False,
        unknown_char="󱈸󱈸 ",
        low_foreground = colors[4],
        low_short_text = False,
        update_interval = 60,
        )
batIcon = widget.BatteryIcon(
        padding = 0,
        scale = 1,
        update_interval = 30,
        )
tray = widget.Systray(
        background = colors[0],
        #icon_size = 10,
        fontsize = 10,
        foreground = colors[5],
        padding = 3,
        )
temp = widget.ThermalSensor(
        font = "UbuntuMono Nerd Font",
        fontsize = 10,
        format='{temp:.0f}{unit}',
        fmt = ' {}',
        foreground = colors[5],
        background = colors[0],
        )

network = widget.Net(
        font = "UbuntuMono Nerd Font",
        interface = "wlp7s0",
        #format = '{interface}',
        prefix = 'M',
        fontsize = 10,
        )
line = widget.TextBox(
        text = "|",
        font = "UbuntuMono Nerd Font",
        fontsize = 10,
        padding = 2,
        )
widget_defaults = dict(
    font="UbuntuMono Nerd Font", fontsize= 11, padding=0, background=colors[0],
)
extension_defaults = widget_defaults.copy()

'''
screens = [
    Screen(
        wallpaper=os.path.join(os.path.expanduser("~"), "Pictures/wallpaper.jpg"),
        wallpaper_mode="fill",
        
        top=bar.Bar(
            [
                #widget.CurrentLayout(),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                #widget.Chord(
                 #   chords_colors={
                  #      "launch": ("#ff0000", "#ffffff"),
                   # },
                    #name_transform=lambda name: name.upper(),
                #),
                # widget.TextBox("default config", name="default"),
                # widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.Spacer(length=8),
                widget.CPU(),
                widget.Spacer(length=8),
                widget.BatteryIcon(),
                widget.Spacer(length=8),
                widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                widget.Spacer(length=8),
                widget.QuickExit(),
            ],
            24,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
        
    ),
]
'''

screens = [
        Screen(
            wallpaper = "~/.config/qtile/city.jpg",
            wallpaper_mode = "fill",
            top=bar.Bar([
               widget.Prompt(
                 font = "UbuntuMono Nerd Font",
                 fontsize=14,
                 foreground = colors[1]
        ),
        widget.GroupBox(
                 fontsize = 11,
                 margin_y = 5,
                 margin_x = 5,
                 padding_y = 0,
                 padding_x = 1,
                 borderwidth = 3,
                 active = colors[8],
                 inactive = colors[1],
                 rounded = False,
                 highlight_color = colors[2],
                 highlight_method = "line",
                 this_current_screen_border = colors[7],
                 this_screen_border = colors [4],
                 other_current_screen_border = colors[7],
                 other_screen_border = colors[4],
                 ),
        widget.TextBox(
                 text = '|',
                 font = "UbuntuMono Nerd Font",
                 foreground = colors[1],
                 padding = 2,
                 fontsize = 14
                 ),
        widget.CurrentLayoutIcon(
                 # custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                 foreground = colors[1],
                 padding = 4,
                 scale = 0.6
                 ),
        widget.CurrentLayout(
                 foreground = colors[1],
                 padding = 5
                 ),
        widget.TextBox(
                 text = '|',
                 font = "UbuntuMono Nerd Font",
                 foreground = colors[1],
                 padding = 2,
                 fontsize = 14
                 ),
        widget.WindowName(
                 foreground = colors[6],
                 max_chars = 40
                 ),
                widget.Spacer(length = 8),
        widget.CPU(
                 format = '󰻠  {load_percent}%',
                 foreground = colors[4],
                 decorations=[
                     BorderDecoration(
                         colour = colors[4],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Memory(
                 foreground = colors[8],
                 mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myterm + ' -e htop')},
                 format = '{MemUsed: .0f}{mm}',
                 fmt = '  {}',
                 decorations=[
                     BorderDecoration(
                         colour = colors[8],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.DF(
                 update_interval = 60,
                 foreground = colors[5],
                 mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myterm + ' -e df')},
                 partition = '/',
                 #format = '[{p}] {uf}{m} ({r:.0f}%)',
                 format = '{uf}{m}',
                 fmt = '🖴  {}',
                 visible_on_warn = False,
                 decorations=[
                     BorderDecoration(
                         colour = colors[5],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Volume(
                 foreground = colors[7],
                 fmt = '󰕾  {}',
                 decorations=[
                     BorderDecoration(
                         colour = colors[7],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.ThermalSensor(
                format='{temp:.0f}{unit}',
                fmt = ' {}',
                decorations=[
                    BorderDecoration(
                    colour = colors[5],
                    border_width = [0, 0, 2, 0],
                    )]
        ),
        widget.Spacer(length = 8),
        widget.KeyboardLayout(
                 foreground = colors[4],
                 fmt = '⌨  {}',
                 decorations=[
                     BorderDecoration(
                         colour = colors[4],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Clock(
                 foreground = colors[8],
                 format = "⏱  %a, %b %d - %H:%M",
                 decorations=[
                     BorderDecoration(
                         colour = colors[8],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Battery(
        foreground = colors[5],
        charge_char="󰂉 ",
        discharge_char="󰁾 ",
        empty_char="󰁺 ",
        full_char="󰁹 ",
        format = '{char} {percent:2.0%}',
        show_short_text=False,
        unknown_char="󱈸󱈸 ",
        low_foreground = colors[4],
        low_short_text = False,
        update_interval = 60,
        decorations=[
                BorderDecoration(
                    colour = colors[8],
                    border_width = [0, 0, 2, 0],
                 )
            ],
        ),
        widget.Spacer(length = 8),
        widget.Systray(padding = 3),
        widget.Spacer(length = 8),

    widget.TextBox(
        background= colors[0],     
        padding=5,    
        text=" ",
        fontsize=20,
        mouse_callbacks={"Button1": lambda: qtile.cmd_spawn("~/.config/qtile/powermenu.sh")},
    ),
               #curlayout,
                ],
                mirgin=0,
                size=22),
                ),
        ]



# Drag floating layouts.
mouse = [
    Drag(
        [mod],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()
    ),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

#########################################
#############    hooks     ##############
#########################################

########## Auto Start Programs ##########

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser("~/.config/qtile/autostart.sh")
    subprocess.run([home])


# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
